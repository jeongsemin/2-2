#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable:4996)

typedef struct tree {
   struct tree *parent;
   struct tree *right;
   struct tree *left;
   int key;
}tree;

typedef struct root {
   tree *root;
}treeroot;

void insertitem(treeroot *bst, int k);
int findElement(tree *root, int k);
tree * searchNode(tree *root, int k);
tree * fsearchNode(tree * root, int k);
int isExternal(tree *root);
void expandExternal(tree *root);

int main()
{
   treeroot *bst = (treeroot *)malloc(sizeof(treeroot));
   bst->root = NULL;
   char command;
   int key, check = 1;
   int find;
   while (1) {
      scanf("%c", &command);
      if (command == 'i') {
         scanf("%d", &key);
         insertitem(bst, key);
      }
      else if (command == 's') {
         scanf("%d", &key);
         if (bst->root == NULL) {
            printf("1 X\n");
         }
         else {
            find = findElement(bst->root, key);
            if (find != NULL) {
               printf(" %d\n", find);
            }
            else {
               printf(" X\n");
            }
         }
      }
      else if (command == 'q') {
         break;
      }
      getchar();
   }
}

void expandExternal(tree *root)
{
   tree *newl = (tree *)malloc(sizeof(tree));
   tree *newr = (tree *)malloc(sizeof(tree));
   newl->left = NULL;
   newl->right = NULL;
   newl->parent = root;
   newr->left = NULL;
   newr->right = NULL;
   newr->parent = root;
   root->left = newl;
   root->right = newr;
}

void insertitem(treeroot * bst, int k)
{
   if (bst->root == NULL) {
      tree *new = (tree *)malloc(sizeof(tree));
      new->key = k;
      new->parent = NULL;
      bst->root = new;
      expandExternal(bst->root);
   }
   else {
      tree *node = searchNode(bst->root, k);
      if (node->parent->key > k) {
         node->key = k;
         expandExternal(node);
      }
      else {
         node->key = k;
         expandExternal(node);
      }
   }
}

tree * searchNode(tree * root, int k)
{
   tree *tmp;
   tmp = root;
   while (!isExternal(tmp)) {
      if (tmp->key == k)
         return tmp;
      else if (tmp->key > k) {
         tmp = tmp->left;
      }
      else {
         tmp = tmp->right;
      }
   }
   return tmp;
}


tree * fsearchNode(tree * root, int k)
{
   tree *tmp;
   tmp = root;
   while (!isExternal(tmp)) {
      if (tmp->key == k)
         return tmp;
      else if (tmp->key > k) {
         printf("0");
         tmp = tmp->left;
      }
      else {
         printf("1");
         tmp = tmp->right;
      }
   }
   return tmp;
}

int findElement(tree * root, int k)
{
   printf("1");
   tree *node = fsearchNode(root, k);
   int result = NULL;
   if (node != NULL && node->key == k)
      result = node->key;

   return result;
}

int isExternal(tree * root)
{
   if (root->right == NULL && root->left == NULL) {
      return 1;
   }
   return 0;
}